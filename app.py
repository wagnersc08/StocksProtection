# -*- coding: utf-8 -*-
"""
Created on Sun Mar 23 20:34:25 2025

@author: wag08
"""

import yfinance as yf
import pandas as pd
import streamlit as st

# Tickers padrÃ£o
DEFAULT_TICKERS = [
    "BBAS3.SA", "BCIA11.SA", "BOVA11.SA", "BTLG11.SA", "CMIG4.SA", 
    "CSMG3.SA", "DIVO11.SA", "HASH11.SA", "HCTR11.SA", "HGBS11.SA"
]

# FunÃ§Ã£o para calcular mÃ©dias mÃ³veis
def calculate_moving_averages(data, short_window=9, long_window=21, ma50_window=50, ma200_window=200):
    data['MA_9'] = data['Close'].rolling(window=short_window, min_periods=1).mean()
    data['MA_21'] = data['Close'].rolling(window=long_window, min_periods=1).mean()
    data['MA_50'] = data['Close'].rolling(window=ma50_window, min_periods=1).mean()
    data['MA_200'] = data['Close'].rolling(window=ma200_window, min_periods=1).mean()
    return data

# FunÃ§Ã£o para gerar recomendaÃ§Ãµes com base nas mÃ©dias mÃ³veis
def generate_recommendation(data):
    last_row = data.iloc[-1]
    
    # RecomendaÃ§Ã£o para MA de 9 e 21
    if last_row['MA_9'] > last_row['MA_21']:
        ma_9_21_rec = "ğŸŸ¢ Compra (MA 9 > MA 21)"
    else:
        ma_9_21_rec = "ğŸ”´ Venda (MA 9 < MA 21)"
    
    # RecomendaÃ§Ã£o para MA de 50 e 200
    if last_row['MA_50'] > last_row['MA_200']:
        ma_50_200_rec = "ğŸŸ¢ Compra (MA 50 > MA 200)"
    else:
        ma_50_200_rec = "ğŸ”´ Venda (MA 50 < MA 200)"
    
    return ma_9_21_rec, ma_50_200_rec

# FunÃ§Ã£o principal para analisar um ticker
def analyze_ticker(ticker):
    try:
        # Baixar dados histÃ³ricos
        data = yf.download(ticker, period="1y")
        if data.empty:
            return f"Erro: Dados insuficientes para o ticker {ticker}."
        
        # Calcular mÃ©dias mÃ³veis
        data = calculate_moving_averages(data)
        
        # Gerar recomendaÃ§Ãµes
        ma_9_21_rec, ma_50_200_rec = generate_recommendation(data)
        
        # Retornar resultados
        return {
            "Ticker": ticker,
            "MA 9 > 21": ma_9_21_rec,
            "MA 50 > 200": ma_50_200_rec,
            "PreÃ§o Atual": round(data['Close'].iloc[-1], 2),
            "MA 9": round(data['MA_9'].iloc[-1], 2),
            "MA 21": round(data['MA_21'].iloc[-1], 2),
            "MA 50": round(data['MA_50'].iloc[-1], 2),
            "MA 200": round(data['MA_200'].iloc[-1], 2),
        }
    except Exception as e:
        return f"Erro ao analisar o ticker {ticker}: {str(e)}"

# Interface do Streamlit
st.title("AnÃ¡lise de Tickers com MÃ©dias MÃ³veis")

# Entrada de tickers
tickers_input = st.text_input(
    "Digite os tickers separados por vÃ­rgula (ou use os padrÃ£o):", 
    ", ".join(DEFAULT_TICKERS)
)
tickers = [t.strip() for t in tickers_input.split(",")] if tickers_input else DEFAULT_TICKERS

# BotÃ£o para analisar
if st.button("Analisar"):
    results = []
    for ticker in tickers:
        result = analyze_ticker(ticker)
        results.append(result)
    
    # Exibir resultados
    for res in results:
        if isinstance(res, dict):
            st.write(f"ğŸ“Š **{res['Ticker']}**")
            st.write(f"ğŸ’° **PreÃ§o Atual**: {res['PreÃ§o Atual']}")
            st.write(f"ğŸ“ˆ **MA 9**: {res['MA 9']}")
            st.write(f"ğŸ“ˆ **MA 21**: {res['MA 21']}")
            st.write(f"ğŸ“ˆ **MA 50**: {res['MA 50']}")
            st.write(f"ğŸ“ˆ **MA 200**: {res['MA 200']}")
            st.write(f"âœ… **RecomendaÃ§Ã£o (MA 9 vs 21)**: {res['MA 9 > 21']}")
            st.write(f"âœ… **RecomendaÃ§Ã£o (MA 50 vs 200)**: {res['MA 50 > 200']}")
            st.write("---")
        else:
            st.error(res)  # Exibe mensagens de erro